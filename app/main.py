from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from config import BOT_TOKEN, ADMIN_CHAT_ID
import logging

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = [
    {"id": 1, "name": "–ö–æ–ª—å—Ü–æ", "price": 1000},
    {"id": 2, "name": "–°–µ—Ä—å–≥–∏", "price": 1500},
    {"id": 3, "name": "–ë—Ä–∞—Å–ª–µ—Ç", "price": 2000},
]

user_carts = {}

class CartStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_checkout = State()

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trifferi Jewelry!", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "üõí –ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: types.Message):
    kb = InlineKeyboardMarkup()
    for p in PRODUCTS:
        kb.add(InlineKeyboardButton(f"{p['name']} - {p['price']}‚ÇΩ", callback_data=f"add_{p['id']}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def add_to_cart(call: types.CallbackQuery):
    product_id = int(call.data.split("_")[1])
    user_id = call.from_user.id
    cart = user_carts.setdefault(user_id, [])
    cart.append(product_id)
    await call.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@dp.message_handler(lambda m: m.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    total = 0
    for pid in cart:
        prod = next((p for p in PRODUCTS if p["id"] == pid), None)
        if prod:
            text += f"{prod['name']} - {prod['price']}‚ÇΩ\n"
            total += prod['price']
    text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton("–ù–∞–∑–∞–¥"))
    await message.answer(text, reply_markup=kb)

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    text = "–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
    total = 0
    for pid in cart:
        prod = next((p for p in PRODUCTS if p["id"] == pid), None)
        if prod:
            text += f"{prod['name']} - {prod['price']}‚ÇΩ\n"
            total += prod['price']
    text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?"
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton("–ù–∞–∑–∞–¥"))
    await message.answer(text, reply_markup=kb)

@dp.message_handler(lambda m: m.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
async def confirm_order(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    text = "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω."
    await message.answer(text)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    user = message.from_user
    cart_items = [next((p for p in PRODUCTS if p["id"] == pid), None) for pid in cart]
    cart_text = ", ".join([f"{p['name']} ({p['price']}‚ÇΩ)" for p in cart_items if p])
    admin_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.full_name}\n–¢–æ–≤–∞—Ä—ã: {cart_text}"
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É –ø–æ username
    try:
        await bot.send_message(f"@{ADMIN_CHAT_ID}", admin_text)
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞.")
    user_carts[user_id] = []

@dp.message_handler(lambda m: m.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    user_carts[user_id] = []
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user = message.from_user
    text = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {user.full_name}\nUsername: @{user.username or '-'}\nID: {user.id}"
    await message.answer(text)

@dp.message_handler(lambda m: m.text == "–ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await start(message)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
